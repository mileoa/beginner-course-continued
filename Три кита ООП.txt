Рефлексия.
Убрал лишнии возвраты True и False, вместо этого, когда нельзя вернут значения сделал возврат None.
Поправил ошибку с рассчетом наххождения цели в радиусе работы.
Вместо if return return сделал return

Задание 5.1.

def pow2(x):
    return x * x

class Ship:

    def __init__(self, max_health, health, max_capacity,
                 weapon_list, weapon_max_amount, x, y):
        self.__max_health = max_health # Максимальное здоровье
        self.__health = health # Текущее здоровье

        self.__weapon_max_amount = weapon_max_amount # Макисмальное кол-во оружия
        self.__max_capacity = max_capacity # Вместительность корабля
        self.__used_capacity = 0 # Использовано вместительности
        self.__weapon_list = [] # Список установленного оружия
        for i in range (len(weapon_list)):
            self.Install_weapon(weapon_list[i])

        self.__x = x # Положение в пространстве по оси x
        self.__y = y # Положение в пространстве по оси y

    def get_x(self):
        return self.__x
        
    def get_y(self):
        return self.__y
        
    def get_health(self):
        return self.__health
    
    def get_weapon(self, slot):
        if slot >= len(self.__weapon_list):
            return
        return self.__weapon_list[slot]
            
    def Fly_to(self, x, y):
        self.__x = x
        self.__y = y

    def Repair(self, repair_value):
        if self.__health + repair_value >= self.__max_health:
            self.__health = self.__max_health
        else:
            self.__health += repair_value

    def Take_damage(self, damage_value):
        if damage_value >= self.__health:
            self.Die()
        else:
            self.__health -= damage_value
            for i in range(len(self.__weapon_list)):
                self.__weapon_list[i].Take_damage(damage_value)

    def Give_damage(self, target):
        total_damage = 0
        for i in range(len(self.__weapon_list)):
            if (self.__weapon_list[i].Is_target_in_radius(self, target) and
                    self.__weapon_list[i].get_health() != 0):
                total_damage += self.__weapon_list[i].get_attack_damage()
        return total_damage

    def Install_weapon(self, new_weapon):
        if (self.__weapon_max_amount == len(self.__weapon_list)
                or self.__used_capacity + new_weapon.get_weight() > self.__max_capacity):
            return 
        self.__weapon_list.append(new_weapon)
        self.__used_capacity += new_weapon.get_weight()

    def Remove_weapon(self, slot):
        if slot >= len(self.__weapon_list):
            return
        self.__used_capacity -= self.__weapon_list[slot].get_weight()
        self.__weapon_list.pop(slot)

    def Die(self):
        self.__health = 0
        for i in range(len(self.__weapon_list)):
            self.__weapon_list[i].Break()

class Weapon:

    def __init__(self, max_health, health, attack_damage,
                 attack_radius, installed_upgrade, weight):
        self.__max_health = max_health # Макс. здоровье
        self.__health = health # Текущее здоровье
        self.__attack_damage = attack_damage # Урон оружия
        self.__attack_radius = attack_radius # Радиус атаки
        self.__installed_upgrade = installed_upgrade # Установленное улучшение
        self.__weight = weight # Вес оружия
    
    def get_attack_damage(self):
        return self.__attack_damage
    
    def get_attack_radius(self):
        return self.__attack_radius
        
    def get_weight(self):
        return self.__weight
        
    def get_health(self):
        return self.__health
    
    def Take_damage(self, damage_value):
        damage_value_for_weapon = damage_value // 100 + 1 # Урон по оружию
        if damage_value_for_weapon >= self.__health:
            self.Break()
        else:
            self.__health -= damage_value_for_weapon

    def Repair(self, repair_value):
        if self.__health + repair_value >= max_health:
            self.__health = self.__max_health
        else:
            self.__health += repair_value

    def Break(self):
        self.__health = 0

    def Is_target_in_radius(self, shooter, target):
        return (pow2(target.Get_x() - shooter.Get_x()) +
                pow2(target.Get_y() - shooter.Get_y())) <= pow2(self.__radius)

    def Install_upgrade(self, new_upgrade):
        if not isinstance(self.__installed_upgrade, type(None)):
            self.Remove_upgrade()
        self.__installed_upgrade = new_upgrade
        self.__attack_damage += self.__installed_upgrade.get_attack_improvement_value()
        self.__attack_radius += self.__installed_upgrade.get_radius_improvement_value()

    def Remove_upgrade(self):
        if isinstance(self.__installed_upgrade, type(None)):
            return
        self.__attack_damage -= self.__installed_upgrade.get_attack_improvement_value()
        self.__attack_radius -= self.__installed_upgrade.get_radius_improvement_value()
        self.__installed_upgrade = None

class Upgrade:

    def __init__(self, attack_improvement_value, radius_improvement_value):
        self.__attack_improvement_value = attack_improvement_value
        self.__radius_improvement_value = radius_improvement_value
        
    def get_attack_improvement_value(self):
        return self.__attack_improvement_value
    
    def get_radius_improvement_value(self):
        return self.__radius_improvement_value


# Создание оружия игрока
player_weapon_1 = Weapon(100, 100, 100, 100, None, 100)
print("Оружие игрока имеет силу атаки", player_weapon_1.get_attack_damage(),
       "и радиус атаки", player_weapon_1.get_attack_radius())

# Создание улучшения оружия для игрока и его установка
player_upgrade = Upgrade(100, 100)
player_weapon_1.Install_upgrade(player_upgrade)
print("Оружие игрока после установки улучшения имеет силу атаки",
        player_weapon_1.get_attack_damage(), "и радиус атаки",
        player_weapon_1.get_attack_radius())

# Создание корабля игрока
player_ship = Ship(400, 300, 1000, [player_weapon_1], 3, 100, 100)

# Создание оружия противника
enemy_weapon_1 = Weapon(100, 1, 200, 200, None, 100)

# Создание корабля противника
enemy_ship = Ship(400, 400, 1000, [enemy_weapon_1], 1, 1000, 1000)


# Противник пытается выстрелить, но находится слишком далеко
print("Противник попытался выстрелить.")
print("Урон равен", enemy_ship.Give_damage(player_ship))
player_ship.Take_damage(enemy_ship.Give_damage(player_ship))
print("Здоровье игрока осталось прежним: ", player_ship.get_health())

# Игрок приблежается к врагу и пытается выстрелить
player_ship.Fly_to(1020, 1020)
print("Игрок подлетел к противнику.")
print("Игрок попытался выстрелить.")
print("Урон равен", player_ship.Give_damage(enemy_ship))
enemy_ship.Take_damage(player_ship.Give_damage(enemy_ship))
print("Здоровье противника уменьшилось до", enemy_ship.get_health())
print("Также сломалось оружие противника. Оно теперь имеет",
        enemy_ship.get_weapon(0).get_health(), "здоровья")

# Противник чинится
print("Противник пытается починиться.")
enemy_ship.Repair(100)
print("Теперь здоровье противника", enemy_ship.get_health())

# Противник снимает сломанное оружие
enemy_ship.Remove_weapon(0)

# Игрок снимает улучшение с оружия и стреляет в противника 3 раза
print("Игрок снимает улучшение с оружия.")
player_ship.get_weapon(0).Remove_upgrade()
print("Оружие игрока после снятия улучшения имеет силу атаки",
        player_weapon_1.get_attack_damage(), "и радиус атаки",
        player_weapon_1.get_attack_radius())

print("Игрок попытался выстрелить.")
print("Урон равен", player_ship.Give_damage(enemy_ship))
enemy_ship.Take_damage(player_ship.Give_damage(enemy_ship))
print("Здоровье противника уменьшилось до", enemy_ship.get_health())
print("Игрок попытался выстрелить.")
print("Урон равен", player_ship.Give_damage(enemy_ship))
enemy_ship.Take_damage(player_ship.Give_damage(enemy_ship))
print("Здоровье противника уменьшилось до", enemy_ship.get_health())
print("Игрок попытался выстрелить.")
print("Урон равен", player_ship.Give_damage(enemy_ship))
enemy_ship.Take_damage(player_ship.Give_damage(enemy_ship))
print("Здоровье противника уменьшилось до", enemy_ship.get_health())


Задание 5.2.
import random

class Robot:
    
    def __init__(self, max_health, health, max_speed, x, y, temperature):
        self.__max_health = max_health # Максимальное здоровье
        self.__health = health # Здоровье
        self.__max_speed = max_speed # Максимальная скорость робота
        self.__speed = 0 # Скорость робота
        self.__noise = 0 # текущий шум робота
        self.__temperature = temperature
        self.__x = x # Положение в пространстве по оси x
        self.__y = y # Положение в пространстве по оси y

    def Get_x(self):
        return self.__x

    def Get_y(self):
        return self.__y

    def Get_temperature(self):
        return self.__temperature

    def Get_noise(self):
        return self.__noise

    def Run(self, new_speed):
        if new_speed >= self.__max_speed:
            self.__speed = self.__max_speed
        else:
            self.__speed = new_speed
        self.__noise += 100
        self.__temperature += 50
        
    def Stop(self):
        self.__speed = 0
        self.__noise -= 100
        self.__temperature -= 50
        
    def Die(self):
        self.Stop()
        self.__health = 0

    def Move_to(self, new_x, new_y):
        if self.__speed == 0:
            return
        self.__x = new_x
        self.__y = new_y
        
    def Increase_health(self, inc_value):
        if self.__health == 0:
            return
        elif self.__health + inc_value >= self.__max_health:
            self.__health = self.__max_health
        else:
            self.__health += inc_value
    
    def Decrease_health(self, dec_value):
        if self.__health == 0:
            return
        elif self.__health - dec_value <= 0:
            self.Die()
        else:
            self.__health -= dec_value
    

class Healer(Robot):
    
    def __init__(self, heal_power, max_health, health, max_speed):
        super().__init__(max_health, health, max_speed)
        self.__heal_power = heal_power # Сила лечения
        self.__resurrect_ablility = 2 # Количество доступных воскрешений
        
    def Heal(self, target):
        if target.get_health == 0:
            return
        target.Increase_health(self.__heal_power)

    def Resurrect(self, target):
        if target.get_health != 0 or self.__resurrect_ablility == 0:
            return
        target.Increase_health(self.__heal_power)
    
class Destroyer(Robot):

    def __init__(self, attack_power, max_health, health, max_speed):
        super().__init__(max_health, health, max_speed)
        self.__attack_power = attack_power # Сила атаки

    def Attack(self, target):
        target.Decrease_health(self.__attack_power)

    def Can_kill_one_shot(self, target):
        return target.get_health() <= self.__attack_power
        
class Sensor:

    def __init__(self, radius, error, x, y, noise, temperature,
                low_measurement_limit, up_measurement_limit):
        self.__radius = radius # Радиус работы дачтика
        self._error = error # Погрешность датчика в процентах
        self.__noise = noise # Шум от датчика
        self.__temperature = temperature # Температура датчика

        # Нижняя и верхняя граница диапазона измерения
        self.__low_measurement_limit = low_measurement_limit
        self.__up_measurement_limit = up_measurement_limit
        
        self.__x = x # Положение в пространстве по оси x
        self.__y = y # Положение в пространстве по оси y

    def Get_x(self):
        return self.__x

    def Get_y(self):
        return self.__y

    def Get_temperature(self):
        return self.__temperature

    def Get_noise(self):
        return self.__noise

    def Move(self, x, y):
        self.__x = x
        self.__y = y

    def Tune(self):
        self._error -= int(self._error * 0.5)
    
    def Is_target_in_radius(self, target):
        return (pow2(target.Get_x() - self.__x) +
                pow2(target.Get_y() - self.__y)
                ) <= pow2(self.__radius)
    
    def Is_in_measurement_range(self, value):
        return (value <= self.__up_measurement_limit and
                value >= self.__low_measurement_limit)


class SoundLevelMeter(Sensor):

    def __init__(self, radius, error, x, y, noise, temperature,
                low_measurement_limit, up_measurement_limit):
        super().__init__(radius, error, x, y, noise, temperature,
                        low_measurement_limit, up_measurement_limit)

    def Measure_noise(self, target):
        if not self.Is_target_in_radius(target):
            return
        target_noise = target.Get_noise()
        errored_noise = random.randint(int(target_noise - target_noise * self._error/100),
                                              int(target_noise + target_noise * self._error/100))
        if not self.Is_in_measurement_range(errored_noise):
            return
        return errored_noise
    
    def Is_noise_harmful(self, noise):
        return noise >= 80

class Pyrometer(Sensor):

    def __init__(self, radius, error, x, y, noise, temperature,
                low_measurement_limit, up_measurement_limit):
        super().__init__(radius, error, x, y, noise, temperature,
                        low_measurement_limit, up_measurement_limit)
    
    def Measure_temperature(self, target):
        if not self.Is_target_in_radius(target):
            return
        target_temperature = target.Get_temperature()
        errored_temperature = random.randint(int(target_temperature - target_temperature * self._error/100),
                                              int(target_temperature + target_temperature * self._error/100))
        if not self.Is_in_measurement_range(errored_temperature):
            return
        return errored_temperature
    
    def Is_temperature_comfortable(self, temperature):
        return temperature >= 24 and temperature <= 30


# Проверим работу датчиков
fabric_sound_meter = SoundLevelMeter(100, 50, 0, 0, 0, 24, 0, 120)
fabric_pyrometer = Pyrometer(20, 5, 100, 100, 100, 32, -100, 1000)

# Попробуем измерить температуру шумомтера
sound_meter_temp = fabric_pyrometer.Measure_temperature(fabric_sound_meter)
if isinstance(sound_meter_temp, type(None)):
    print("Не удалось измерить температуру шумометра")
else:
    print("Температура шумометра ", sound_meter_temp)

# Подвинем прирометр ближе
fabric_pyrometer.Move(1, 1)

# Попробуем измерить температуру шумомтера
sound_meter_temp = fabric_pyrometer.Measure_temperature(fabric_sound_meter)
if isinstance(sound_meter_temp, type(None)):
    print("Не удалось измерить температуру шумометра")
else:
    print("Температура шумометра ", sound_meter_temp)
print()

# Измерим несколько раз шум пирометра
for i in range(3):
    pyrometer_noise = fabric_sound_meter.Measure_noise(fabric_pyrometer)
    if isinstance(pyrometer_noise, type(None)):
        print("Не удалось измерить шум пирометра")
    else:
        print("Шум пирометра равен", pyrometer_noise)

print("Значения измерений странные, надо настроить шумометр")
print()

for i in range(5):
    fabric_sound_meter.Tune()

# Измерим несколько раз шум пирометра
for i in range(3):
    pyrometer_noise = fabric_sound_meter.Measure_noise(fabric_pyrometer)
    if isinstance(pyrometer_noise, type(None)):
        print("Не удалось измерить шум пирометра")
    else:
        print("Шум пирометра равен", pyrometer_noise)

print("Теперь лучше")
print()

print("Проверим не вредный ли уровень шума от пирометра")
pyrometer_noise = fabric_sound_meter.Measure_noise(fabric_pyrometer)
if fabric_sound_meter.Is_noise_harmful(fabric_sound_meter.Measure_noise(fabric_pyrometer)):
    print("Пирометр слишком шумный")
else:
    print("Пирометр шумит в пределах нормы")